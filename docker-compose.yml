version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dizzme-postgres
    environment:
      POSTGRES_DB: dizzme_db
      POSTGRES_USER: dizzme_user
      POSTGRES_PASSWORD: dizzme_pass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - dizzme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dizzme_user -d dizzme_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: dizzme-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dizzme-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Spring Boot Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: dizzme-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: dizzme_db
      DB_USERNAME: dizzme_user
      DB_PASSWORD: dizzme_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dizzme-super-secret-key-for-jwt-tokens-2024-docker
      FRONTEND_URL: http://localhost:4200
      CORS_ORIGINS: http://localhost:4200,http://localhost:3000
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dizzme-network
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Angular Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dizzme-frontend
    ports:
      - "4200:80"
    depends_on:
      - backend
    networks:
      - dizzme-network
    restart: unless-stopped
    environment:
      API_URL: http://localhost:8080/api

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: dizzme-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - dizzme-network
    restart: unless-stopped

  # PgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dizzme-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dizzme.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - dizzme-network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  dizzme-network:
    driver: bridge